-- This file has been extracted from https://alhassy.github.io/PathCat/
-- Type checks with Agda version 2.6.0.

module PathCat where

open import Level using (Level) renaming (zero to ‚Ñì‚ÇÄ ; suc to ‚Ñìsuc ; _‚äî_ to _‚äç_)

-- Numbers
open import Data.Fin
  using (Fin ; to‚Ñï ; from‚Ñï ; from‚Ñï‚â§ ; reduce‚â• ; inject‚â§)
  renaming (_<_ to _f<_ ; zero to fzero ; suc to fsuc)
open import Data.Nat
open import Relation.Binary using (module DecTotalOrder)
open import Data.Nat.Properties using(‚â§-decTotalOrder ; ‚â§-refl)
open DecTotalOrder Data.Nat.Properties.‚â§-decTotalOrder

-- Z-notation for sums
open import Data.Product using (Œ£ ; proj‚ÇÅ ; proj‚ÇÇ ; _√ó_ ; _,_)
Œ£‚à∂‚Ä¢ : {a b : Level} (A : Set a) (B : A ‚Üí Set b) ‚Üí Set (a ‚äç b)
Œ£‚à∂‚Ä¢ = Œ£
infix -666 Œ£‚à∂‚Ä¢
syntax Œ£‚à∂‚Ä¢ A (Œª x ‚Üí B) = Œ£ x ‚à∂ A ‚Ä¢ B

-- Equalities
open import Relation.Binary.PropositionalEquality using (_‚âó_ ; _‚â°_)
  renaming (sym to ‚â°-sym ; refl to ‚â°-refl ; trans to _‚ü®‚â°‚â°‚ü©_ 
           ; cong to ‚â°-cong ; cong‚ÇÇ to ‚â°-cong‚ÇÇ 
           ; subst to ‚â°-subst ; subst‚ÇÇ to ‚â°-subst‚ÇÇ ; setoid to ‚â°-setoid)

module _ {i} {S : Set i} where
    open import Relation.Binary.EqReasoning (‚â°-setoid S) public

open import Agda.Builtin.String

defn-chasing : ‚àÄ {i} {A : Set i} (x : A) ‚Üí String ‚Üí A ‚Üí A
defn-chasing x reason supposedly-x-again = supposedly-x-again

syntax defn-chasing x reason xish = x ‚â°‚ü® reason ‚ü©‚Ä≤ xish

infixl 3 defn-chasing

_even-under_ : ‚àÄ {a b} {A : Set a} {B : Set b} {x y} ‚Üí x ‚â° y ‚Üí (f : A ‚Üí B) ‚Üí f x ‚â° f y 
_even-under_ = Œª eq f ‚Üí ‚â°-cong f eq

record Graph‚ÇÄ : Set‚ÇÅ where
  field
    V   : Set
    E   : Set
    src : E ‚Üí V
    tgt : E ‚Üí V

record _ùí¢‚ü∂‚ÇÄ_ (G H : Graph‚ÇÄ) : Set‚ÇÅ where
  open Graph‚ÇÄ
  field
    vertex : V(G) ‚Üí V(H)
    edge   : E(G) ‚Üí E(H)
    src-preservation : ‚àÄ e ‚Üí src(H) (edge e) ‚â°  vertex (src(G) e)
    tgt-preservation : ‚àÄ e ‚Üí tgt(H) (edge e) ‚â°  vertex (tgt(G) e)

-- ‚Äòsmall graphs‚Äô , since we are not using levels
record Graph : Set‚ÇÅ where
  field
    V    : Set
    _‚ü∂_ : V ‚Üí V ‚Üí Set

-- i.e., Graph ‚âà Œ£ V ‚à∂ Set ‚Ä¢ (V ‚Üí V)
-- Graphs are a dependent type!

record GraphMap (G H : Graph) : Set‚ÇÅ where    
    private
      open Graph using (V)
      _‚ü∂g_ = Graph._‚ü∂_ G
      _‚ü∂h_ = Graph._‚ü∂_ H
    field
      ver  : V(G) ‚Üí V(H)                                   -- vertex morphism
      edge : {x y : V(G)} ‚Üí (x ‚ü∂g y) ‚Üí (ver x ‚ü∂h ver y) -- arrow preservation

open GraphMap

-- embedding: j < n ‚áí j < suc n
`_ : ‚àÄ{n} ‚Üí Fin n ‚Üí Fin (suc n)
` j = inject‚â§ j (‚â§-step ‚â§-refl) where open import Data.Nat.Properties using (‚â§-step)

[_]‚ÇÄ : ‚Ñï ‚Üí Graph‚ÇÄ
[ n ]‚ÇÄ = record 
    { V = Fin (suc n)                  -- ‚âà {0, 1, ..., n - 1, n}
    ; E = Fin n                        -- ‚âà {0, 1, ..., n - 1}
    ; src = Œª j ‚Üí ` j
    ; tgt = Œª j ‚Üí fsuc j
    }

[_] : ‚Ñï ‚Üí Graph
[ n ] = record {V = Fin (suc n) ; _‚ü∂_ = Œª x y ‚Üí fsuc x ‚â° ` y }

open import Data.Vec 
  using (Vec) 
  renaming (_‚à∑_ to _,,_ ; [] to nil) -- , already in use for products :/
  
-- one sorted
record Signature : Set where
    field
     ùí© : ‚Ñï        -- How many function symbols there are
     ar : Vec ‚Ñï ùí© -- Their arities: lookup i ar == arity of i-th function symbol

open Signature ‚¶É...‚¶Ñ -- ùí© now refers to the number of function symbols in a signature

MonSig : Signature
MonSig = record { ùí© = 2 ; ar = 0 ,, 2 ,, nil }
-- unit u : X‚Å∞ ‚Üí X and multiplication m : X¬≤ ‚Üí X

module _ where -- An anyonomous module for categorial definitions
    
 record Category {i j : Level} : Set (‚Ñìsuc (i ‚äç j)) where
  infixr 10 _‚®æ_
  field
    Obj      : Set i
    _‚ü∂_     : Obj ‚Üí Obj ‚Üí Set j
    _‚®æ_      : ‚àÄ {A B C : Obj} ‚Üí A ‚ü∂ B ‚Üí B ‚ü∂ C ‚Üí A ‚ü∂ C
    assoc    : ‚àÄ {A B C D} {f : A ‚ü∂ B}{g : B ‚ü∂ C} {h : C ‚ü∂ D} ‚Üí (f ‚®æ g) ‚®æ h ‚â° f ‚®æ (g ‚®æ h)
    Id       : ‚àÄ {A : Obj} ‚Üí A ‚ü∂ A
    leftId   : ‚àÄ {A B : Obj} {f : A ‚ü∂ B} ‚Üí Id ‚®æ f ‚â° f
    rightId  : ‚àÄ {A B : Obj} {f : A ‚ü∂ B} ‚Üí f ‚®æ Id ‚â° f

 open Category using (Obj)
 open Category ‚¶É...‚¶Ñ hiding (Obj)

 -- Some sugar for times when we must specify the category
 -- ‚Äúcolons associate to the right‚Äù ;-)
 
 arr = Category._‚ü∂_ 
 syntax arr ùíû x y  =  x ‚ü∂ y ‚à∂ ùíû    -- ‚Äúghost colon‚Äù

 cmp = Category._‚®æ_
 syntax cmp ùíû f g  =  f ‚®æ g ‚à∂ ùíû    -- ‚Äúghost colon‚Äù

 open Category using (Obj) public
 
 record Iso {i} {j} (ùíû : Category {i} {j}) (A B : Obj ùíû) : Set j where
   private instance ùíû‚Ä≤ : Category ; ùíû‚Ä≤ = ùíû
   field
     to   : A ‚ü∂ B
     from : B ‚ü∂ A
     lid  : to ‚®æ from ‚â° Id
     rid  : from ‚®æ to ‚â° Id
     
 syntax Iso ùíû A B = A ‚âÖ B within ùíû

 instance
  ùíÆeùìâ : ‚àÄ {i} ‚Üí Category {‚Ñìsuc i} {i} -- this is a ‚Äòbig‚Äô category
  ùíÆeùìâ {i} = record {
      Obj = Set i
    ; _‚ü∂_ = Œª A B ‚Üí (A ‚Üí B)
    ; _‚®æ_ = Œª f g ‚Üí (Œª x ‚Üí g (f x))
    ; assoc = ‚â°-refl
    ; Id = Œª x ‚Üí x
    ; leftId = ‚â°-refl
    ; rightId = ‚â°-refl
    }

 record Functor {i j k l} (ùíû : Category {i} {j}) (ùíü : Category {k} {l}) 
  : Set (‚Ñìsuc (i ‚äç j ‚äç k ‚äç l)) where
  private
    instance
      ùíû‚Ä≤ : Category ;  ùíû‚Ä≤ = ùíû
      ùíü‚Ä≤ : Category ;  ùíü‚Ä≤  = ùíü
  field
    -- Usual graph homomorphism structure: An object map, with morphism preservation
    obj   : Obj ùíû ‚Üí Obj ùíü                           
    mor   : ‚àÄ{x y : Obj ùíû} ‚Üí x ‚ü∂ y ‚Üí obj x ‚ü∂ obj y
    -- Interaction with new algebraic structure: Preservation of identities & composition
    id    : ‚àÄ{x   : Obj ùíû} ‚Üí mor (Id {A = x}) ‚â° Id       -- identities preservation
    comp  : ‚àÄ{x y z} {f : x ‚ü∂ y} {g : y ‚ü∂ z} ‚Üí mor (f ‚®æ g) ‚â° mor f ‚®æ mor g

  -- Aliases for readability
  functor_preserves-composition = comp
  functor_preserves-identities  = id

 open Functor public hiding (id ; comp)

 NatTrans : ‚àÄ {i j i‚Äô j‚Äô}  ‚¶É ùíû : Category {i} {j} ‚¶Ñ ‚¶É ùíü : Category {i‚Äô} {j‚Äô} ‚¶Ñ 
            (F G : Functor ùíû ùíü) ‚Üí Set (j‚Äô ‚äç i ‚äç j)
 NatTrans ‚¶É ùíû = ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ F G =
   Œ£ Œ∑ ‚à∂ (‚àÄ {X : Obj ùíû} ‚Üí (obj F X) ‚ü∂ (obj G X))
       ‚Ä¢ (‚àÄ {A B} {f : A ‚ü∂ B} ‚Üí mor F f ‚®æ Œ∑ {B} ‚â° Œ∑ {A} ‚®æ mor G f)

 -- function extensionality
 postulate extensionality : ‚àÄ {i j} {A : Set i} {B : A ‚Üí Set j} 
                              {f g : (a : A) ‚Üí B a}
                          ‚Üí (‚àÄ {a} ‚Üí f a ‚â° g a) ‚Üí f ‚â° g

 -- functor extensionality
 postulate funcext : ‚àÄ {i j k l} ‚¶É ùíû : Category {i} {j} ‚¶Ñ ‚¶É ùíü : Category {k} {l} ‚¶Ñ
                       {F G : Functor ùíû ùíü} 
                     ‚Üí (oeq : ‚àÄ {o} ‚Üí obj F o ‚â° obj G o)
                     ‚Üí (‚àÄ {X Y} {f : X ‚ü∂ Y}
                        ‚Üí mor G f  ‚â°  ‚â°-subst‚ÇÇ (Category._‚ü∂_ ùíü) oeq oeq (mor F f))
                     ‚Üí F ‚â° G

 -- graph map extensionality
 postulate graphmapext : {G H : Graph } {f g : GraphMap G H} 
                       ‚Üí (veq : ‚àÄ {v} ‚Üí ver f v ‚â° ver g v)
                       ‚Üí (‚àÄ {x y} {e : Graph._‚ü∂_ G x y} 
                          ‚Üí edge g e ‚â° ‚â°-subst‚ÇÇ (Graph._‚ü∂_ H) veq veq (edge f e))
                       ‚Üí f ‚â° g

 -- natural transformation extensionality
 postulate nattransext : ‚àÄ {i j i‚Äô j‚Äô} {ùíû : Category {i} {j} } {ùíü : Category {i‚Äô} {j‚Äô} } 
                         {F G : Functor ùíû ùíü} (Œ∑ Œ≥ : NatTrans F G)
                       ‚Üí (‚àÄ {X} ‚Üí proj‚ÇÅ Œ∑ {X} ‚â° proj‚ÇÅ Œ≥ {X})
                       ‚Üí Œ∑ ‚â° Œ≥

 instance
  ùíûùí∂ùìâ : ‚àÄ {i j} ‚Üí Category {‚Ñìsuc (i ‚äç j)} {‚Ñìsuc (i ‚äç j)}
  ùíûùí∂ùìâ {i} {j} = record {
      Obj = Category {i} {j}
    ; _‚ü∂_ = Functor
    ; _‚®æ_ = Œª {ùíû} {ùíü} {‚Ñ∞} F G ‚Üí
        let instance
                   ùíû‚Ä≤ : Category ; ùíû‚Ä≤ = ùíû
                   ùíü‚Ä≤ : Category ; ùíü‚Ä≤ = ùíü  
                   ‚Ñ∞‚Ä≤ : Category ; ‚Ñ∞‚Ä≤ = ‚Ñ∞
        in record
        { obj  =  obj F ‚®æ obj G -- this compositon lives in ùíÆeùìâ
        ; mor  =  mor F ‚®æ mor G
        ; id   =  Œª {x} ‚Üí begin
              (mor F ‚®æ mor G) (Id ‚¶É ùíû ‚¶Ñ {A = x})
            ‚â°‚ü® "definition of function composition" ‚ü©‚Ä≤
              mor G (mor F Id)
            ‚â°‚ü® functor F preserves-identities even-under (mor G) ‚ü©
              mor G Id
            ‚â°‚ü® functor G preserves-identities ‚ü©
              Id
            ‚àé 
        ; comp = Œª {x y z f g} ‚Üí             
             begin
               (mor F ‚®æ mor G) (f ‚®æ g)
            ‚â°‚ü® "definition of function composition" ‚ü©‚Ä≤
               mor G (mor F (f ‚®æ g))
             ‚â°‚ü® functor F preserves-composition even-under mor G ‚ü©
               mor G (mor F f ‚®æ mor F g)
             ‚â°‚ü® functor G preserves-composition ‚ü©
               (mor F ‚®æ mor G) f ‚®æ (mor F ‚®æ mor G) g
             ‚àé
        }
    ; assoc    =  Œª {a b c d f g h} ‚Üí funcext ‚â°-refl ‚â°-refl
    ; Id       =  record { obj = Id ; mor = Id ; id = ‚â°-refl ; comp = ‚â°-refl }
    ; leftId   =  funcext ‚â°-refl ‚â°-refl
    ; rightId  =  funcext ‚â°-refl ‚â°-refl
    }

  ùí¢ùìáùí∂ùìÖùíΩ : Category
  ùí¢ùìáùí∂ùìÖùíΩ =
   record
    { Obj   = Graph ; _‚ü∂_ = GraphMap
    ; _‚®æ_   = Œª f g ‚Üí record { ver = ver f ‚®æ ver g ; edge = edge f ‚®æ edge g } -- using ~ùíÆet~
    ; assoc = ‚â°-refl  -- function composition is associtive, by definition
    ; Id    = record { ver = Id ; edge = Id } ; leftId = ‚â°-refl ; rightId = ‚â°-refl
    -- functional identity is no-op, by definition
    }
    where open GraphMap

 ùí∞‚ÇÄ : Category ‚Üí Graph
 ùí∞‚ÇÄ ùíû = record { V = Obj ùíû ; _‚ü∂_ = Category._‚ü∂_ ùíû }

 ùí∞‚ÇÅ : {ùíû ùíü : Category} ‚Üí ùíû ‚ü∂ ùíü ‚Üí ùí∞‚ÇÄ ùíû ‚ü∂ ùí∞‚ÇÄ ùíü
 ùí∞‚ÇÅ F = record { ver = obj F ; edge = mor F }

-- Underlying/forgetful functor: Every category is a graph
 ùí∞ : Functor ùíûùí∂ùìâ ùí¢ùìáùí∂ùìÖùíΩ
 ùí∞ = record { obj = ùí∞‚ÇÄ ; mor = ùí∞‚ÇÅ ; id = ‚â°-refl ; comp = ‚â°-refl }

 instance
  Func : ‚àÄ {i j i‚Äô j‚Äô} (ùíû : Category {i} {j}) (ùíü : Category {i‚Äô} {j‚Äô}) ‚Üí Category {‚Ñìsuc (i ‚äç j ‚äç i‚Äô ‚äç j‚Äô)} {j‚Äô ‚äç i ‚äç j}
  Func {i} {j} {i‚Äô} {j‚Äô} ùíû ùíü = record {
      Obj = Functor ùíû ùíü
    ; _‚ü∂_ = NatTrans
    ; _‚®æ_ = Œª {A B C} Œ∑ Œ≥ ‚Üí comp {A} {B} {C} Œ∑ Œ≥
    ; assoc = Œª {F G H K Œ∑ Œ≥ œâ} ‚Üí nattransext {i} {j} {i‚Äô} {j‚Äô} {ùíû} {ùíü} {F} {K} (comp {F} {H} {K} (comp {F} {G} {H} Œ∑ Œ≥) œâ) (comp {F} {G} {K} Œ∑ (comp {G} {H} {K} Œ≥ œâ)) assoc
    ; Id = Œª {F} ‚Üí iden F
    ; leftId = Œª {F G Œ∑} ‚Üí nattransext {i} {j} {i‚Äô} {j‚Äô} {ùíû} {ùíü} {F} {G} (comp {F} {F} {G} (iden F) Œ∑) Œ∑ leftId
    ; rightId = Œª {F G Œ∑} ‚Üí nattransext {i} {j} {i‚Äô} {j‚Äô} {ùíû} {ùíü} {F} {G} (comp {F} {G} {G} Œ∑ (iden G)) Œ∑ rightId
    }
    where
      instance
        ùíü‚Ä≤ : Category
        ùíü‚Ä≤ = ùíü

      iden : (A : Functor ùíû ùíü) ‚Üí NatTrans A A
      iden A = Id , (rightId ‚ü®‚â°‚â°‚ü© ‚â°-sym leftId)

      -- To avoid long wait times, we avoid instance resolution by
      -- making an alias.
      _‚®æ‚Ä≤_ = Category._‚®æ_ ùíü
      infixr 6 _‚®æ‚Ä≤_

      comp : {A B C : Functor ùíû ùíü} ‚Üí NatTrans A B ‚Üí NatTrans B C ‚Üí NatTrans A C
      comp {F} {G} {H} (Œ∑ , nat) (Œ≥ , nat‚Ä≤) = (Œª {X} ‚Üí Œ∑ {X} ‚®æ‚Ä≤ Œ≥ {X}) , (Œª {A B f} ‚Üí begin
           mor F f ‚®æ‚Ä≤ Œ∑ {B} ‚®æ‚Ä≤ Œ≥ {B}
          ‚â°‚ü® ‚â°-sym assoc ‚ü®‚â°‚â°‚ü© (‚â°-cong‚ÇÇ _‚®æ‚Ä≤_ nat ‚â°-refl ‚ü®‚â°‚â°‚ü© assoc) ‚ü©
            Œ∑ {A} ‚®æ‚Ä≤ mor G f ‚®æ‚Ä≤ Œ≥ {B}
          ‚â°‚ü® ‚â°-cong‚ÇÇ _‚®æ‚Ä≤_ ‚â°-refl nat‚Ä≤ ‚ü®‚â°‚â°‚ü© ‚â°-sym assoc ‚ü©
            (Œ∑ {A} ‚®æ‚Ä≤ Œ≥ {A}) ‚®æ‚Ä≤ mor H f
          ‚àé)

 module graphs-as-functors where

  -- formal objects
  data ùí¢‚ÇÄ : Set where E V : ùí¢‚ÇÄ

  -- formal arrows
  data ùí¢‚ÇÅ : ùí¢‚ÇÄ ‚Üí ùí¢‚ÇÄ ‚Üí Set where
     s t : ùí¢‚ÇÅ E V              
     id  : ‚àÄ {o} ‚Üí ùí¢‚ÇÅ o o 

  -- (forward) composition
  fcmp : ‚àÄ {a b c} ‚Üí ùí¢‚ÇÅ a b ‚Üí ùí¢‚ÇÅ b c ‚Üí ùí¢‚ÇÅ a c
  fcmp f id = f
  fcmp id f = f

  instance
   ùí¢ : Category
   ùí¢ = record
        { Obj     = ùí¢‚ÇÄ
        ; _‚ü∂_     = ùí¢‚ÇÅ
        ; _‚®æ_     = fcmp
        ; assoc   = Œª {a b c d f g h} ‚Üí fcmp-assoc f g h
        ; Id      = id
        ; leftId  = left-id
        ; rightId = right-id
        }
    where
       -- exercises: prove associativity, left and right unit laws

       -- proofs are just C-c C-a after some casing

       fcmp-assoc : ‚àÄ {a b c d} (f : ùí¢‚ÇÅ a b) (g : ùí¢‚ÇÅ b c) (h : ùí¢‚ÇÅ c d) ‚Üí fcmp (fcmp f g) h ‚â° fcmp f (fcmp g h)
       fcmp-assoc s id id = ‚â°-refl
       fcmp-assoc t id id = ‚â°-refl
       fcmp-assoc id s id = ‚â°-refl
       fcmp-assoc id t id = ‚â°-refl
       fcmp-assoc id id s = ‚â°-refl
       fcmp-assoc id id t = ‚â°-refl
       fcmp-assoc id id id = ‚â°-refl

       right-id : ‚àÄ {a b} {f : ùí¢‚ÇÅ a b} ‚Üí fcmp f id ‚â° f
       right-id {f = s} = ‚â°-refl
       right-id {f = t} = ‚â°-refl
       right-id {f = id} = ‚â°-refl

       left-id : ‚àÄ {a b} {f : ùí¢‚ÇÅ a b} ‚Üí fcmp id f ‚â° f
       left-id {f = s} = ‚â°-refl
       left-id {f = t} = ‚â°-refl
       left-id {f = id} = ‚â°-refl

  toFunc : Graph ‚Üí Functor ùí¢ ùíÆeùìâ
  toFunc G = record 
    { obj  = ‚ü¶_‚üß‚ÇÄ 
    ; mor  = ‚ü¶_‚üß‚ÇÅ 
    ; id   = ‚â°-refl 
    ; comp = Œª {x y z f g} ‚Üí fcmp-‚®æ {x} {y} {z} {f} {g}
    }
    where
      ‚ü¶_‚üß‚ÇÄ : Obj ùí¢ ‚Üí Obj ùíÆeùìâ
      ‚ü¶ ùí¢‚ÇÄ.V ‚üß‚ÇÄ = Graph.V G
      ‚ü¶ ùí¢‚ÇÄ.E ‚üß‚ÇÄ = Œ£ x ‚à∂ Graph.V G ‚Ä¢ Œ£ y ‚à∂ Graph.V G ‚Ä¢ Graph._‚ü∂_ G x y
          
      ‚ü¶_‚üß‚ÇÅ : ‚àÄ {x y : Obj ùí¢} ‚Üí x ‚ü∂ y ‚Üí (‚ü¶ x ‚üß‚ÇÄ ‚Üí ‚ü¶ y ‚üß‚ÇÄ) 
      ‚ü¶ s ‚üß‚ÇÅ (src , tgt , edg) = src
      ‚ü¶ t ‚üß‚ÇÅ (src , tgt , edg) = tgt
      ‚ü¶ id ‚üß‚ÇÅ x = x

      -- Exercise: fcmp is realised as functional composition
      fcmp-‚®æ : ‚àÄ{x y z} {f : ùí¢‚ÇÅ x y} {g : ùí¢‚ÇÅ y z} ‚Üí ‚ü¶ fcmp f g ‚üß‚ÇÅ ‚â° ‚ü¶ f ‚üß‚ÇÅ ‚®æ ‚ü¶ g ‚üß‚ÇÅ

      fcmp-‚®æ {f = s} {id} = ‚â°-refl
      fcmp-‚®æ {f = t} {id} = ‚â°-refl
      fcmp-‚®æ {f = id} {s} = ‚â°-refl
      fcmp-‚®æ {f = id} {t} = ‚â°-refl
      fcmp-‚®æ {f = id} {id} = ‚â°-refl

  fromFunc : Functor ùí¢ ùíÆeùìâ ‚Üí Graph
  fromFunc F = record {
      V      = obj F ùí¢‚ÇÄ.V
    ; _‚ü∂_    = Œª x y ‚Üí Œ£ e ‚à∂ obj F ùí¢‚ÇÄ.E ‚Ä¢ src e ‚â° x √ó tgt e ‚â° y
             -- the type of edges whose source is x and target is y
    }
    where tgt src : obj F ùí¢‚ÇÄ.E ‚Üí obj F ùí¢‚ÇÄ.V
          src = mor F ùí¢‚ÇÅ.s
          tgt = mor F ùí¢‚ÇÅ.t

 _·µí·µñ : ‚àÄ {i j} ‚Üí Category {i} {j} ‚Üí Category {i} {j}
 ùíû ·µí·µñ         = record {
      Obj     = Obj ùíû
    ; _‚ü∂_     = Œª A B ‚Üí (B ‚ü∂ A)
    ; _‚®æ_     = Œª f g ‚Üí (g ‚®æ f)
    ; assoc   = ‚â°-sym assoc
    ; Id      = Id
    ; leftId  = rightId
    ; rightId = leftId
    }
    where instance ùíû‚Ä≤ : Category ; ùíû‚Ä≤ = ùíû

 infix 10 _‚àò_
 _‚àò_ : ‚àÄ {i j } ‚¶É ùíû : Category {i} {j}‚¶Ñ {A B C : Obj ùíû} ‚Üí B ‚ü∂ C ‚Üí  A ‚ü∂ B ‚Üí A ‚ü∂ C
 f ‚àò g = g ‚®æ f

 -- this only changes type
 opify : ‚àÄ {i j i‚Äô j‚Äô} {ùíû : Category {i} {j}} {ùíü : Category {i‚Äô} {j‚Äô}} 
      ‚Üí Functor ùíû ùíü ‚Üí Functor (ùíû ·µí·µñ) (ùíü ·µí·µñ)
 opify F = record { obj   =  obj F 
                  ; mor   =  mor F 
                  ; id    =  Functor.id F 
                  ; comp  =  Functor.comp F 
                  }

 ‚àÇ : ‚àÄ {i j} ‚Üí Functor (ùíûùí∂ùìâ {i} {j}) ùíûùí∂ùìâ
 ‚àÇ = record { obj = _·µí·µñ ; mor = opify ; id = ‚â°-refl ; comp = ‚â°-refl }

 ah-yeah : ‚àÄ {i j} (let Cat = Obj (ùíûùí∂ùìâ {i} {j}))
     -- identity on objects cofunctor, sometimes denoted _Àò
     ‚Üí (dual : ‚àÄ (ùíû : Cat) {x y : Obj ùíû}  ‚Üí  x ‚ü∂ y ‚à∂ ùíû  ‚Üí  y ‚ü∂ x ‚à∂ ùíû)
     ‚Üí (IdÀò : ‚àÄ ‚¶É ùíû : Cat ‚¶Ñ {x : Obj ùíû} ‚Üí dual ùíû Id  ‚â°  Id {A = x})
     ‚Üí (‚®æ-Àò : ‚àÄ ‚¶É ùíû : Cat ‚¶Ñ {x y z : Obj ùíû} {f : x ‚ü∂ y} {g : y ‚ü∂ z}
            ‚Üí dual ùíû (f ‚®æ g ‚à∂ ùíû)  ‚â°  (dual ùíû g) ‚®æ (dual ùíû f) ‚à∂ ùíû)
     -- which is involutionary
     ‚Üí (ÀòÀò : ‚àÄ ‚¶É ùíû : Cat ‚¶Ñ {x y : Obj ùíû} {f : x ‚ü∂ y} ‚Üí dual ùíû (dual ùíû f) ‚â° f)
     -- which is respected by other functors
     ‚Üí (respect : ‚¶É ùíû ùíü : Cat ‚¶Ñ {F : ùíû ‚ü∂ ùíü} {x y : Obj ùíû} {f : x ‚ü∂ y}
                ‚Üí mor F (dual ùíû f) ‚â° dual ùíü (mor F f))
     -- then
     ‚Üí ‚àÇ ‚âÖ Id within Func (ùíûùí∂ùìâ {i} {j}) ùíûùí∂ùìâ

 ah-yeah {i} {j} _Àò IdÀò ‚®æ-Àò ÀòÀò respect = record
   { to = II
   ; from = JJ
   ; lid = nattransext {ùíû = ùíûùí∂ùìâ} {ùíûùí∂ùìâ} {‚àÇ} {‚àÇ} (Category._‚®æ_ ùí©ùìâ {‚àÇ} {Id} {‚àÇ} II JJ) (Category.Id ùí©ùìâ {‚àÇ}) Œª {ùíû} ‚Üí funcext ‚â°-refl (‚â°-sym (ÀòÀò ‚¶É ùíû ‚¶Ñ ))
   ; rid = nattransext {ùíû = ùíûùí∂ùìâ} {ùíûùí∂ùìâ} {Id} {Id} (Category._‚®æ_ ùí©ùìâ {Id} {‚àÇ} {Id} JJ II) (Category.Id ùí©ùìâ {Id}) Œª {ùíû} ‚Üí funcext ‚â°-refl (‚â°-sym (ÀòÀò ‚¶É ùíû ‚¶Ñ))
   }
   where
   
     ùí©ùìâ = Func (ùíûùí∂ùìâ {i} {j}) (ùíûùí∂ùìâ {i} {j}) -- the category of ~ùí©~atural transormations as morphisms
     
     I : ‚¶É ùíû : Category {i} {j} ‚¶Ñ ‚Üí Functor (obj ‚àÇ ùíû) ùíû
     I ‚¶É ùíû ‚¶Ñ = record { obj = Id ; mor = _Àò ùíû ; id = IdÀò ; comp = ‚®æ-Àò }

     _‚®æf_ = Category._‚®æ_ (ùíûùí∂ùìâ {i} {j})

     Inat : ‚¶É ùíû ùíü : Category {i} {j} ‚¶Ñ {F : Functor ùíû ùíü} ‚Üí mor ‚àÇ F ‚®æf I ‚¶É ùíü ‚¶Ñ  ‚â°  I ‚¶É ùíû ‚¶Ñ ‚®æf F
     Inat ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F} = funcext ‚¶É ùíû = ùíû ·µí·µñ ‚¶Ñ ‚¶É ùíü ‚¶Ñ { mor ‚àÇ F ‚®æf I ‚¶É ùíü ‚¶Ñ } { I ‚¶É ùíû ‚¶Ñ ‚®æf F } ‚â°-refl Œª {x} {y} {f} ‚Üí respect ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F} {y} {x} {f}

     II : NatTrans ‚àÇ Id
     II = I , (Œª {ùíû} {ùíü} {F} ‚Üí Inat ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F})

     J : ‚¶É ùíû : Category {i} {j} ‚¶Ñ ‚Üí ùíû ‚ü∂ obj ‚àÇ ùíû
     J ‚¶É ùíû ‚¶Ñ = record { obj = Id ; mor = _Àò ùíû ; id = IdÀò ; comp = ‚®æ-Àò }

     Jnat : ‚¶É ùíû ùíü : Category {i} {j} ‚¶Ñ {F : ùíû ‚ü∂ ùíü}  ‚Üí  F ‚®æf J ‚¶É ùíü ‚¶Ñ  ‚â°  J ‚¶É ùíû ‚¶Ñ ‚®æf mor ‚àÇ F
     Jnat ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F} = funcext ‚¶É ùíû = ùíû ‚¶Ñ ‚¶É ùíü ·µí·µñ ‚¶Ñ {F ‚®æf J ‚¶É ùíü ‚¶Ñ} {J ‚¶É ùíû ‚¶Ñ ‚®æf mor ‚àÇ F} ‚â°-refl (Œª {x y f} ‚Üí respect ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F} {x} {y} {f})

     JJ : NatTrans ‚¶É ùíûùí∂ùìâ {i} {j} ‚¶Ñ ‚¶É ùíûùí∂ùìâ ‚¶Ñ Id ‚àÇ
     JJ = J , (Œª {ùíû} {ùíü} {F} ‚Üí Jnat ‚¶É ùíû ‚¶Ñ ‚¶É ùíü ‚¶Ñ {F})

 infix 5 _‚äó_
 _‚äó_ : ‚àÄ {i j i‚Äô j‚Äô} ‚Üí Category {i} {j} ‚Üí Category {i‚Äô} {j‚Äô} ‚Üí Category {i ‚äç i‚Äô} {j ‚äç j‚Äô}
 ùíû ‚äó ùíü = record
           { Obj = Obj ùíû √ó Obj ùíü
           ; _‚ü∂_ = Œª{ (A , X) (B , Y)  ‚Üí  (A ‚ü∂ B) √ó (X ‚ü∂ Y) }
           ; _‚®æ_ = Œª{ (f , k) (g , l) ‚Üí (f ‚®æ g , k ‚®æ l) }
           ; assoc = assoc ‚â°√ó‚â° assoc
           ; Id = Id , Id
           ; leftId = leftId ‚â°√ó‚â° leftId
           ; rightId = rightId ‚â°√ó‚â° rightId
           }
           where
             _‚â°√ó‚â°_ : ‚àÄ {i j} {A : Set i} {B : Set j} {a a‚Äô : A} {b b‚Äô : B} ‚Üí a ‚â° a‚Äô ‚Üí b ‚â° b‚Äô ‚Üí (a , b) ‚â° (a‚Äô , b‚Äô)
             ‚â°-refl ‚â°√ó‚â° ‚â°-refl = ‚â°-refl
             instance
               ùíû‚Ä≤ : Category
               ùíû‚Ä≤ = ùíû
               ùíü‚Ä≤ : Category
               ùíü‚Ä≤ = ùíü

 Fst : ‚àÄ {i j i‚Äô j‚Äô} {ùíû : Category {i} {j}} {ùíü : Category {i‚Äô} {j‚Äô}} 
     ‚Üí Functor (ùíû ‚äó ùíü) ùíû
 Fst = record { obj = proj‚ÇÅ ; mor = proj‚ÇÅ ; id = ‚â°-refl ; comp = ‚â°-refl }

 Snd : ‚àÄ {i j i‚Äô j‚Äô} {ùíû : Category {i} {j}} {ùíü : Category {i‚Äô} {j‚Äô}} 
     ‚Üí Functor (ùíû ‚äó ùíü) ùíü
 Snd = record { obj = proj‚ÇÇ ; mor = proj‚ÇÇ ; id = ‚â°-refl ; comp = ‚â°-refl }

 curry‚ÇÇ : ‚àÄ {ix jx iy jy iz jz} ‚¶É ùí≥ : Category {ix} {jx} ‚¶Ñ ‚¶É ùí¥ : Category {iy} {jy} ‚¶Ñ ‚¶É ùíµ : Category {iz} {jz} ‚¶Ñ
         ‚Üí Functor (ùí≥ ‚äó ùí¥) ùíµ ‚Üí Functor ùí¥ (Func ùí≥ ùíµ)
 curry‚ÇÇ ‚¶É ùí≥ = ùí≥ ‚¶Ñ ‚¶É ùí¥ ‚¶Ñ ‚¶É ùíµ ‚¶Ñ F = record {
    obj =  funcify
  ; mor =  natify
  ; id =  Œª {x} ‚Üí nattransext {F = funcify x} {funcify x} (natify (Id {A = x})) (Category.Id (Func ùí≥ ùíµ) {A = funcify x}) (Functor.id F)
  ; comp =  Œª {x y z f g} ‚Üí nattransext {F = funcify x} {funcify z} (natify (f ‚®æ g)) ( Category._‚®æ_ (Func ùí≥ ùíµ) {A = funcify x} {B = funcify y} {C = funcify z} (natify f) (natify g) ) (begin
             mor F (Id , f ùí¥.‚®æ g)
           ‚â°‚ü® ‚â°-cong (Œª e ‚Üí mor F (e , f ùí¥.‚®æ g)) (‚â°-sym ùí≥.rightId) ‚ü©
             mor F (Id ùí≥.‚®æ Id , f ùí¥.‚®æ g)
           ‚â°‚ü® functor F preserves-composition ‚ü©
             mor F (Id , f) ùíµ.‚®æ mor F (Id , g)
           ‚àé) }
  where
        module ùí≥ = Category ùí≥
        module ùí¥ = Category ùí¥
        module ùíµ = Category ùíµ
        funcify : (y : Obj ùí¥) ‚Üí Functor ùí≥ ùíµ
        funcify = Œª Y ‚Üí record {
            obj = Œª X ‚Üí obj F (X , Y)
          ; mor = Œª f ‚Üí mor F (f , Id ‚¶É ùí¥ ‚¶Ñ {A = Y})
          ; id = Functor.id F
          ; comp = Œª {x y z f g} ‚Üí begin
                mor F (f ùí≥.‚®æ g , Id ‚¶É ùí¥ ‚¶Ñ)
              ‚â°‚ü® ‚â°-cong (Œª x ‚Üí mor F (f ùí≥.‚®æ g , x)) (‚â°-sym ùí¥.rightId) ‚ü©
                mor F (f ùí≥.‚®æ g , Id ùí¥.‚®æ Id)
              ‚â°‚ü® Functor.comp F ‚ü©
                mor F (f , Id ‚¶É ùí¥ ‚¶Ñ) ùíµ.‚®æ mor F (g , Id ‚¶É ùí¥ ‚¶Ñ)
              ‚àé }
        
        natify : {x y : Obj ùí¥} ‚Üí x ùí¥.‚ü∂ y ‚Üí NatTrans (funcify x) (funcify y)
        natify {x} {y} f = (Œª {z} ‚Üí mor F (Id {A = z} , f)) , (Œª {a b g} ‚Üí begin
                mor F (g , Id) ùíµ.‚®æ mor F (Id , f)
              ‚â°‚ü® ‚â°-sym (functor F preserves-composition) ‚ü©
                 mor F (g ùí≥.‚®æ Id , Id ùí¥.‚®æ f)
              ‚â°‚ü® ‚â°-cong‚ÇÇ (Œª x y ‚Üí mor F (x , y)) ùí≥.rightId ùí¥.leftId ‚ü©
                 mor F (g , f)
              ‚â°‚ü® ‚â°-sym (‚â°-cong‚ÇÇ (Œª x y ‚Üí mor F (x , y)) ùí≥.leftId ùí¥.rightId) ‚ü©
                 mor F (Id ùí≥.‚®æ g , f ùí¥.‚®æ Id)
              ‚â°‚ü® functor F preserves-composition ‚ü©
                mor F (Id , f) ùíµ.‚®æ mor F (g , Id)
              ‚àé)

 pointwise : ‚àÄ {ic jc id jd ix jx iy jy} {ùíû : Category {ic} {jc}} {ùíü : Category {id} {jd}}
   {ùí≥ : Category {ix} {jx}} {ùí¥ : Category {iy} {jy}}
   (_‚äï_ : Functor (ùí≥ ‚äó ùí¥) ùíü) (F : Functor ùíû ùí≥) (G : Functor ùíû ùí¥) ‚Üí Functor ùíû ùíü
 pointwise {ùíû = ùíû} {ùíü} {ùí≥} {ùí¥} Bi F G =
   let module ùí≥ = Category ùí≥
       module ùí¥ = Category ùí¥
       module ùíû = Category ùíû
       module ùíü = Category ùíü
   in record {
     obj = Œª C ‚Üí obj Bi (obj F C , obj G C)
   ; mor = Œª {x y} x‚Üíy ‚Üí mor Bi (mor F x‚Üíy , mor G x‚Üíy)
   ; id = Œª {x} ‚Üí begin
          mor Bi (mor F ùíû.Id , mor G ùíû.Id)
        ‚â°‚ü® ‚â°-cong‚ÇÇ (Œª f g ‚Üí mor Bi (f , g)) (Functor.id F) (Functor.id G) ‚ü©
          mor Bi (ùí≥.Id , ùí¥.Id)
        ‚â°‚ü® functor Bi preserves-identities ‚ü©
          ùíü.Id
        ‚àé
   ; comp = Œª {x y z x‚ü∂y y‚ü∂z} ‚Üí begin
       mor Bi (mor F (x‚ü∂y ùíû.‚®æ y‚ü∂z) , mor G (x‚ü∂y ùíû.‚®æ y‚ü∂z))
     ‚â°‚ü® ‚â°-cong‚ÇÇ (Œª f g ‚Üí mor Bi (f , g)) (Functor.comp F) (Functor.comp G) ‚ü©
       mor Bi (mor F x‚ü∂y ùí≥.‚®æ mor F y‚ü∂z , mor G x‚ü∂y ùí¥.‚®æ mor G y‚ü∂z)
     ‚â°‚ü® functor Bi preserves-composition ‚ü©
      (mor Bi (mor F x‚ü∂y , mor G x‚ü∂y)) ùíü.‚®æ (mor Bi (mor F y‚ü∂z , mor G y‚ü∂z))
     ‚àé
     }

 exempli-gratia : ‚àÄ {ùíû ùíü ùí≥ ùí¥ : Category {‚Ñì‚ÇÄ} {‚Ñì‚ÇÄ}} (‚äï : Functor (ùí≥ ‚äó ùí¥) ùíü)
                ‚Üí let _‚ü®‚äï‚ü©_ = pointwise ‚äï
                   in
                      Fst ‚ü®‚äï‚ü© Snd ‚â° ‚äï
 exempli-gratia Bi = funcext (‚â°-cong (obj Bi) ‚â°-refl) (‚â°-cong (mor Bi) ‚â°-refl)

 Hom : ‚àÄ {i j} {ùíû : Category {i} {j} } ‚Üí Functor (ùíû ·µí·µñ ‚äó ùíû) (ùíÆeùìâ {j})
   -- hence contravariant in ‚Äòfirst arg‚Äô and covaraint in ‚Äòsecond arg‚Äô
 Hom {ùíû = ùíû} =
   let
     module ùíû = Category ùíû
     instance ùíû‚Ä≤ : Category ; ùíû‚Ä≤ = ùíû
     ‚®æ-cong‚ÇÇ : ‚àÄ {A B C : Obj ùíû} {f : A ùíû.‚ü∂ B} {g g‚Äô : B ùíû.‚ü∂ C}
             ‚Üí g ‚â° g‚Äô ‚Üí f ùíû.‚®æ g ‚â° f ùíû.‚®æ g‚Äô
     ‚®æ-cong‚ÇÇ  q  =  ‚â°-cong‚ÇÇ ùíû._‚®æ_ ‚â°-refl q
   in record {
     obj = Œª{ (A , B) ‚Üí  A ‚ü∂ B }
   ; mor = Œª{ (f , g) ‚Üí Œª h ‚Üí f ‚®æ h ‚®æ g }
   ; id = extensionality (Œª {h} ‚Üí begin
        Id ùíû.‚®æ h ùíû.‚®æ Id
      ‚â°‚ü® leftId ‚ü©
        h ùíû.‚®æ Id
      ‚â°‚ü® rightId ‚ü©
        h
      ‚àé)
   ; comp =  Œª {x y z fg fg‚Äô} ‚Üí
       let (f , g) = fg ; (f‚Äô , g‚Äô) = fg‚Äô in extensionality (Œª {h} ‚Üí begin
            (f‚Äô ùíû.‚®æ f) ùíû.‚®æ h ùíû.‚®æ (g ùíû.‚®æ g‚Äô)
          ‚â°‚ü® assoc ‚ü©
            f‚Äô ùíû.‚®æ (f ùíû.‚®æ (h ùíû.‚®æ (g ùíû.‚®æ g‚Äô)))
          ‚â°‚ü® ‚®æ-cong‚ÇÇ (‚â°-sym assoc) ‚ü©
            f‚Äô ùíû.‚®æ ((f ùíû.‚®æ h) ùíû.‚®æ (g ùíû.‚®æ g‚Äô))
          ‚â°‚ü® ‚®æ-cong‚ÇÇ (‚â°-sym assoc) ‚ü©
            f‚Äô ùíû.‚®æ ((f ùíû.‚®æ h) ùíû.‚®æ g) ùíû.‚®æ g‚Äô
          ‚â°‚ü® ‚®æ-cong‚ÇÇ (‚â°-cong‚ÇÇ ùíû._‚®æ_ assoc ‚â°-refl) ‚ü©
            f‚Äô ùíû.‚®æ (f ùíû.‚®æ h ùíû.‚®æ g) ùíû.‚®æ g‚Äô
          ‚àé)
     }

 _‚ä£‚ÇÄ_ : ‚àÄ {i j} {ùíû ùíü : Category {i} {j}} ‚Üí Functor ùíû ùíü ‚Üí Functor ùíü ùíû ‚Üí Set (i ‚äç j)
 _‚ä£‚ÇÄ_ {ùíû = ùíû} {ùíü} F G 
    =
      (F ‚Ä≤ ‚àò X  ‚ü∂‚Çô‚Çê‚Çú Y)  ‚âÖ  (X ‚ü∂‚Çô‚Çê‚Çú G ‚àò Y)  within  Func (ùíû ·µí·µñ ‚äó ùíü) ùíÆeùìâ
   where
     X = Fst ; Y = Snd ; _‚Ä≤ = opify -- only changes types
          
     infix 5 _‚ü∂‚Çô‚Çê‚Çú_
     _‚ü∂‚Çô‚Çê‚Çú_ : ‚àÄ {i j} {ùíú : Category {i} {j}} ‚Üí
            Functor (ùíû ·µí·µñ ‚äó ùíü) (ùíú ·µí·µñ) ‚Üí Functor (ùíû ·µí·µñ ‚äó ùíü) ùíú ‚Üí Functor (ùíû ·µí·µñ ‚äó ùíü) ùíÆeùìâ
     _‚ü∂‚Çô‚Çê‚Çú_ {i} {j} {ùíú} = pointwise (Hom {i} {j} {ùíú})

 record _‚ä£_ {i j i‚Äô j‚Äô} {ùíû : Category {i} {j}} {ùíü : Category {i‚Äô} {j‚Äô}} 
        (F : Functor ùíû ùíü) (G : Functor ùíü ùíû)
        : Set (j‚Äô ‚äç i‚Äô ‚äç j ‚äç i) where

   open Category ùíü renaming (_‚®æ_ to _‚®æ‚ÇÇ_)
   open Category ùíû renaming (_‚®æ_ to _‚®æ‚ÇÅ_)
   field
     -- ‚Äòleft-adjunct‚Äô  L ‚âà ‚åä  and  ‚Äòright-adjunct‚Äô  r ‚âà ‚åà
     ‚åä_‚åã : ‚àÄ {X Y} ‚Üí   obj F X ‚ü∂ Y ‚à∂ ùíü   ‚Üí   X ‚ü∂ obj G Y ‚à∂ ùíû
     ‚åà_‚åâ : ‚àÄ {X Y} ‚Üí   X ‚ü∂ obj G Y ‚à∂ ùíû   ‚Üí   obj F X ‚ü∂ Y ‚à∂ ùíü

     -- Adjuncts are inverse operations
     lid : ‚àÄ {X Y} {d : obj F X ‚ü∂ Y ‚à∂ ùíü} ‚Üí ‚åà ‚åä d ‚åã ‚åâ ‚â° d
     rid : ‚àÄ {X Y} {c : X ‚ü∂ obj G Y ‚à∂ ùíû} ‚Üí ‚åä ‚åà c ‚åâ ‚åã ‚â° c

     -- That for a fixed argument, are natural transformations between Hom functors
     lfusion : ‚àÄ {A B C D} {f : A ‚ü∂ B ‚à∂ ùíû} {œà : obj F B ‚ü∂ C ‚à∂ ùíü} {g : C ‚ü∂ D ‚à∂ ùíü}
             ‚Üí  ‚åä mor F f ‚®æ‚ÇÇ œà ‚®æ‚ÇÇ g ‚åã  ‚â°  f ‚®æ‚ÇÅ ‚åä œà ‚åã ‚®æ‚ÇÅ mor G g
     rfusion : ‚àÄ {A B C D} {f : A ‚ü∂ B ‚à∂ ùíû} {œà : B ‚ü∂ obj G C ‚à∂ ùíû} {g : C ‚ü∂ D ‚à∂ ùíü}
             ‚Üí  ‚åà f ‚®æ‚ÇÅ œà ‚®æ‚ÇÅ mor G g ‚åâ  ‚â°  mor F f ‚®æ‚ÇÇ ‚åà œà ‚åâ ‚®æ‚ÇÇ g

Path‚ÇÄ : ‚Ñï ‚Üí Graph‚ÇÄ ‚Üí Set (‚Ñìsuc ‚Ñì‚ÇÄ)
Path‚ÇÄ n G = [ n ]‚ÇÄ ùí¢‚ü∂‚ÇÄ G

open import Data.Vec using (Vec ; lookup)

record Path‚ÇÅ (n : ‚Ñï) (G : Graph‚ÇÄ) : Set (‚Ñìsuc ‚Ñì‚ÇÄ) where
  open Graph‚ÇÄ
  field
    edges     : Vec (E G) (suc n)
    coherency : {i : Fin n} ‚Üí tgt G (lookup (` i) edges) ‚â° src G (lookup (fsuc i) edges)

module Path-definition-2 (G : Graph‚ÇÄ) where
  open Graph‚ÇÄ G

  mutual
    data Path‚ÇÇ : Set where
      _!   : V ‚Üí Path‚ÇÇ
      cons : (v : V) (e : E) (ps : Path‚ÇÇ) (s : v ‚â° src e) (t : tgt e ‚â° head‚ÇÇ ps) ‚Üí Path‚ÇÇ

    head‚ÇÇ : Path‚ÇÇ ‚Üí V
    head‚ÇÇ (v !) = v
    head‚ÇÇ (cons v e p s t) = v

module Path-definition-3 (G : Graph) where

  open Graph G

  -- handy dandy syntax
  infixr 5 cons
  syntax cons v ps e = v ‚ü∂[ e ]‚ü∂ ps -- v goes, by e, onto path ps

  -- we want well-formed paths
  mutual
    data Path‚ÇÉ : Set where
      _!   : (v : V) ‚Üí Path‚ÇÉ
      cons : (v : V) (ps : Path‚ÇÉ) (e : v ‚ü∂ head‚ÇÉ ps) ‚Üí Path‚ÇÉ

    head‚ÇÉ : Path‚ÇÉ ‚Üí V
    head‚ÇÉ (v !) = v
    head‚ÇÉ (v ‚ü∂[ e ]‚ü∂ ps) = v

  -- motivation for the syntax declaration above
  example : (v‚ÇÅ v‚ÇÇ v‚ÇÉ : V) (e‚ÇÅ : v‚ÇÅ ‚ü∂ v‚ÇÇ) (e‚ÇÇ : v‚ÇÇ ‚ü∂ v‚ÇÉ) ‚Üí Path‚ÇÉ
  example v‚ÇÅ v‚ÇÇ v‚ÇÉ e‚ÇÅ e‚ÇÇ = v‚ÇÅ ‚ü∂[ e‚ÇÅ ]‚ü∂ v‚ÇÇ ‚ü∂[ e‚ÇÇ ]‚ü∂ v‚ÇÉ !

  end‚ÇÉ : Path‚ÇÉ ‚Üí V
  end‚ÇÉ (v !) = v
  end‚ÇÉ (v ‚ü∂[ e ]‚ü∂ ps) = end‚ÇÉ ps

  -- typed paths; squigarrowright
  record _‚áù_ (x y : V) : Set where
    field
      path   : Path‚ÇÉ
      start  : head‚ÇÉ path ‚â° x
      finish : end‚ÇÉ path  ‚â° y

module TypedPaths (G : Graph) where

  open Graph G hiding(V)
  open Graph   using (V)
  
  data _‚áù_ : V G ‚Üí V G ‚Üí Set where
    _!      : ‚àÄ x ‚Üí x ‚áù x
    _‚ü∂[_]‚ü∂_ : ‚àÄ x {y œâ} (e : x ‚ü∂ y) (ps : y ‚áù œâ) ‚Üí x ‚áù œâ

  -- Preprend preserves path equality
  ‚ü∂-‚â° : ‚àÄ{x y œâ} {e : x ‚ü∂ y} {ps qs : y ‚áù œâ} 
      ‚Üí ps ‚â° qs ‚Üí (x ‚ü∂[ e ]‚ü∂ ps) ‚â° (x ‚ü∂[ e ]‚ü∂ qs)
  ‚ü∂-‚â° {x} {y} {œâ} {e} {ps} {qs} eq = ‚â°-cong (Œª r ‚Üí x ‚ü∂[ e ]‚ü∂ r) eq

  open import Data.List using (List ; [] ; _‚à∑_)
  edges : ‚àÄ {x œâ} (p : x ‚áù œâ) ‚Üí List (Œ£ s ‚à∂ V G ‚Ä¢ Œ£ t ‚à∂ V G ‚Ä¢ s ‚ü∂ t)
  edges {x} (.x !) = []
  edges {x} (.x ‚ü∂[ e ]‚ü∂ ps) = (x , _ , e) ‚à∑ edges ps

  path-eq : ‚àÄ {x y} {p q : x ‚áù y} ‚Üí edges p ‚â° edges q ‚Üí p ‚â° q
  path-eq {x} {p = .x !} {q = .x !} pf = ‚â°-refl
  path-eq {x} {p = .x !} {q = .x ‚ü∂[ e ]‚ü∂ q} ()
  path-eq {x} {p = .x ‚ü∂[ e ]‚ü∂ p} {q = .x !} ()
  path-eq {x} {p = .x ‚ü∂[ e ]‚ü∂ p} {q = .x ‚ü∂[ e‚ÇÅ ]‚ü∂ q} pf with edges p | pf
  path-eq {x} {p = .x ‚ü∂[ e ]‚ü∂ p} {q = .x ‚ü∂[ .e ]‚ü∂ q} pf | .(edges q) | ‚â°-refl = ‚ü∂-‚â° (path-eq (uncons pf))
    where uncons : ‚àÄ{A : Set} {x y : A} {xs ys : List A} ‚Üí x ‚à∑ xs ‚â° y ‚à∑ ys ‚Üí xs ‚â° ys
          uncons {A} {x} {.x} {xs} {.xs} ‚â°-refl = ‚â°-refl

  infixr 5 _++_

  _++_ : ‚àÄ{x y z} ‚Üí x ‚áù y ‚Üí y ‚áù z ‚Üí x ‚áù z
  x ! ++ q           = q                         -- left unit
  (x ‚ü∂[ e ]‚ü∂ p) ++ q = x ‚ü∂[ e ]‚ü∂ (p ++ q)     -- mutual-associativity

  leftId : ‚àÄ {x y} {p : x ‚áù y} ‚Üí x ! ++ p ‚â° p
  leftId = ‚â°-refl

  rightId : ‚àÄ {x y} {p : x ‚áù y} ‚Üí p ++ y ! ‚â° p
  rightId {x} {.x} {.x !} = ‚â°-refl
  rightId {x} {y } {.x ‚ü∂[ e ]‚ü∂ ps} = ‚â°-cong (Œª q ‚Üí x ‚ü∂[ e ]‚ü∂ q) rightId

  assoc : ‚àÄ{x y z œâ} {p : x ‚áù y} {q : y ‚áù z} {r : z ‚áù œâ} 
        ‚Üí (p ++ q) ++ r ‚â° p ++ (q ++ r)
  assoc {x} {p = .x !} = ‚â°-refl
  assoc {x} {p = .x ‚ü∂[ e ]‚ü∂ ps} {q} {r} = ‚â°-cong (Œª s ‚Üí x ‚ü∂[ e ]‚ü∂ s) (assoc {p = ps})

ùí´‚ÇÄ : Graph ‚Üí Category
ùí´‚ÇÄ G = let open TypedPaths G in
    record
      { Obj     = Graph.V G
      ; _‚ü∂_     = _‚áù_
      ; _‚®æ_     = _++_
      ; assoc   = Œª {x y z œâ p q r} ‚Üí assoc {p = p}
      ; Id      = Œª {x} ‚Üí x !
      ; leftId  = leftId
      ; rightId = rightId
      }

ùí´‚ÇÅ : ‚àÄ {G H} ‚Üí GraphMap G H ‚Üí Functor (ùí´‚ÇÄ G) (ùí´‚ÇÄ H)
ùí´‚ÇÅ {G} {H} f = record 
    { obj  = ver f 
    ; mor  = amore
    ; id   = ‚â°-refl 
    ; comp = Œª {x} {y} {z} {p} ‚Üí comp {p = p} 
    }
    where
      open TypedPaths ‚¶É...‚¶Ñ public
      instance G' : Graph ; G' = G
               H' : Graph ; H' = H

      amore : {x y : Graph.V G} ‚Üí  x ‚áù y ‚Üí (ver f x) ‚áù (ver f y)
      amore (x !) = ver f x !
      amore (x ‚ü∂[ e ]‚ü∂ p) = ver f x ‚ü∂[ edge f e ]‚ü∂ amore p

      comp : {x y z : Graph.V G} {p : x ‚áù y} {q : y ‚áù z} 
          ‚Üí  amore (p ++ q)  ‚â°  amore p ++ amore q
      comp {x} {p = .x !} = ‚â°-refl    -- since ! is left unit of ++
      comp {x} {p = .x ‚ü∂[ e ]‚ü∂ ps} = ‚ü∂-‚â° (comp {p = ps})

ùí´ : Functor ùí¢ùìáùí∂ùìÖùíΩ ùíûùí∂ùìâ
ùí´ = record { obj   = ùí´‚ÇÄ 
            ; mor  = ùí´‚ÇÅ 
            ; id   = Œª {G} ‚Üí funcext ‚â°-refl (id ‚¶É G ‚¶Ñ) 
            ; comp = funcext ‚â°-refl comp 
            }
    where
      open TypedPaths ‚¶É...‚¶Ñ
      open Category   ‚¶É...‚¶Ñ

      module ùíûùí∂ùìâ   = Category ùíûùí∂ùìâ
      module ùí¢ùìáùí∂ùìÖùíΩ = Category ùí¢ùìáùí∂ùìÖùíΩ

      id : ‚àÄ ‚¶É G ‚¶Ñ {x y} {p : x ‚áù y} 
        ‚Üí   mor (ùíûùí∂ùìâ.Id {ùí´‚ÇÄ G}) p  ‚â°  mor (ùí´‚ÇÅ (ùí¢ùìáùí∂ùìÖùíΩ.Id)) p
      id {p = x !} = ‚â°-refl
      id {p = x ‚ü∂[ e ]‚ü∂ ps} = ‚ü∂-‚â° (id {p = ps})

      comp : {G H K : Graph} {f : GraphMap G H} {g : GraphMap H K}
           ‚Üí {x y : Graph.V G} {p : TypedPaths._‚áù_ G x y}
           ‚Üí  mor (ùí´‚ÇÅ f ùíûùí∂ùìâ.‚®æ ùí´‚ÇÅ g) p  ‚â°  mor (ùí´‚ÇÅ (f ùí¢ùìáùí∂ùìÖùíΩ.‚®æ g)) p
      comp {p = x !} = ‚â°-refl
      comp {p = x ‚ü∂[ e ]‚ü∂ ps} = ‚ü∂-‚â° (comp {p = ps})

module freedom (G : Obj ùí¢ùìáùí∂ùìÖùíΩ) {ùíû : Category {‚Ñì‚ÇÄ} {‚Ñì‚ÇÄ} } where

  open TypedPaths G using (_! ; _‚ü∂[_]‚ü∂_ ;  _‚áù_ ; _++_)
  open Category ‚¶É...‚¶Ñ

  module ùí¢ùìáùí∂ùìÖùíΩ = Category ùí¢ùìáùí∂ùìÖùíΩ
  module ùíÆ‚ÑØùìâ = Category (ùíÆeùìâ {‚Ñì‚ÇÄ})
  module ùíû = Category ùíû
  instance ùíû‚Ä≤ : Category ; ùíû‚Ä≤ = ùíû

  Œπ : G ‚ü∂ ùí∞‚ÇÄ (ùí´‚ÇÄ G)
  Œπ = record { ver = Id ; edge = Œª {x} {y} e  ‚Üí  x ‚ü∂[ e ]‚ü∂ (y !) }

  lift : G ‚ü∂ ùí∞‚ÇÄ ùíû  ‚Üí  ùí´‚ÇÄ G ‚ü∂ ùíû
  lift f = record 
     { obj  = Œª v ‚Üí ver f v -- Only way to obtain an object of ùíû; hope it works!
     ; mor  = fmap 
     ; id   = ‚â°-refl 
     ; comp = Œª {x y z p q} ‚Üí proof {x} {y} {z} {p} {q}
     }
     where
          fmap : ‚àÄ {x y} ‚Üí x ‚áù y ‚Üí ver f x ùíû.‚ü∂ ver f y
          fmap (y !) = ùíû.Id
          fmap (x ‚ü∂[ e ]‚ü∂ p) = edge f e ùíû.‚®æ fmap p

          -- homomorphism property
          proof : ‚àÄ{x y z} {p : x ‚áù y} {q : y ‚áù z} ‚Üí fmap (p ++ q) ‚â° fmap p ùíû.‚®æ fmap q
          proof {p = ._ !} = ‚â°-sym ùíû.leftId
          proof {p = ._ ‚ü∂[ e ]‚ü∂ ps} =  ‚â°-cong (Œª m ‚Üí edge f e ùíû.‚®æ m) (proof {p = ps}) 
                                     ‚ü®‚â°‚â°‚ü© ‚â°-sym assoc
                                     -- Exercise: Rewrite this calculationally!

  property : ‚àÄ{f : G ‚ü∂ ùí∞‚ÇÄ ùíû}  ‚Üí  f  ‚â°  (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ (lift f))
  property {f} = graphmapext
    -- Proving: ‚àÄ {v} ‚Üí ver f v ‚â° ver (Œπ ùíû.‚®æ ùí∞‚ÇÅ (lift f)) v
    -- by starting at the complicated side and simplifying
    (Œª {v} ‚Üí ‚â°-sym (begin
              ver (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ (lift f)) v
            ‚â°‚ü®" definition of ver on composition "‚ü©‚Ä≤
              (ver Œπ ùíÆ‚ÑØùìâ.‚®æ ver (ùí∞‚ÇÅ (lift f))) v
            ‚â°‚ü®" definition of ùí∞‚ÇÅ says: ver (ùí∞‚ÇÅ F) = obj F "‚ü©‚Ä≤ 
              (ver Œπ ùíÆ‚ÑØùìâ.‚®æ obj (lift f)) v
            ‚â°‚ü®" definition of lift says: obj (lift f) = ver f "‚ü©‚Ä≤
              (ver Œπ ùíÆ‚ÑØùìâ.‚®æ ver f) v
            ‚â°‚ü®" definition of Œπ on vertices is identity "‚ü©‚Ä≤
              ver f v
            ‚àé))
    
    -- Proving: edge (Œπ ‚®æg ùí∞‚ÇÅ (lift f)) e ‚â° edge f e
    (Œª {x} {y} {e} ‚Üí begin
               edge (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ (lift f)) e
             ‚â°‚ü®" definition of edge on composition "‚ü©‚Ä≤
               (edge Œπ ùíÆ‚ÑØùìâ.‚®æ edge (ùí∞‚ÇÅ (lift f))) e
             ‚â°‚ü®" definition of ùí∞ says: edge (ùí∞‚ÇÅ F) = mor F "‚ü©‚Ä≤
               (edge Œπ ùíÆ‚ÑØùìâ.‚®æ mor (lift f)) e
             ‚â°‚ü®" definition chasing gives: mor (lift f) (edge Œπ e) = edge f e ‚®æ Id "‚ü©‚Ä≤
               edge f e ùíû.‚®æ Id
             ‚â°‚ü® ùíû.rightId ‚ü©
               edge f e
             ‚àé)

  uniqueness : ‚àÄ{f : G ‚ü∂ ùí∞‚ÇÄ ùíû} {F : ùí´‚ÇÄ G ‚ü∂ ùíû} ‚Üí f ‚â° (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) ‚Üí lift f ‚â° F
  uniqueness {.(Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)} {F} ‚â°-refl = funcext ‚â°-refl (‚â°-sym pf)
    where
      pf : ‚àÄ{x y} {p : x ‚áù y} ‚Üí  mor (lift (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) p  ‚â°  mor F p
      pf {x} {.x} {p = .x !} = ‚â°-sym (Functor.id F)
      pf {x} {y} {p = .x ‚ü∂[ e ]‚ü∂ ps} = begin
         mor (lift (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) (x ‚ü∂[ e ]‚ü∂ ps)
       ‚â°‚ü®" definition of mor on lift, the inductive clause "‚ü©‚Ä≤       
         edge (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) e ùíû.‚®æ mor (lift (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) ps
       ‚â°‚ü® ‚â°-cong‚ÇÇ ùíû._‚®æ_ ‚â°-refl (pf {p = ps}) ‚ü© -- inductive step
         edge (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) e ùíû.‚®æ mor F ps
       ‚â°‚ü®" definition of edge says it preserves composition "‚ü©‚Ä≤
         (edge Œπ ùíÆ‚ÑØùìâ.‚®æ edge (ùí∞‚ÇÅ F)) e ùíû.‚®æ mor F ps
       ‚â°‚ü®" definition of ùí∞ gives: edge (ùí∞‚ÇÅ F) = mor F "‚ü©‚Ä≤
         (edge Œπ ùíÆ‚ÑØùìâ.‚®æ mor F) e ùíû.‚®æ mor F ps
       ‚â°‚ü®" definition of functional composition ùíÆ‚ÑØùìâ "‚ü©‚Ä≤
          mor F (edge Œπ e) ùíû.‚®æ mor F ps
       ‚â°‚ü® ‚â°-sym (Functor.comp F) {- i.e., functors preserve composition -} ‚ü©
          mor F (edge Œπ e ++ ps)
       ‚â°‚ü®" definition of embedding and concatenation "‚ü©‚Ä≤
         mor F (x ‚ü∂[ e ]‚ü∂ ps)
       ‚àé

  _‚âàg_ : ‚àÄ{G H : Graph} (f g : G ‚ü∂ H) ‚Üí Set
  _‚âàg_ {G} {H} f g = Œ£ veq ‚à∂ (‚àÄ {v} ‚Üí ver f v ‚â° ver g v) ‚Ä¢
    (‚àÄ {x y e} ‚Üí edge g {x} {y} e ‚â° ‚â°-subst‚ÇÇ (Œª a b ‚Üí Graph._‚ü∂_ H a b) veq veq (edge f {x} {y} e))

  _‚âã_ : ‚àÄ{ùíû ùíü : Category} (f g : ùíû ‚ü∂ ùíü) ‚Üí Set
  F ‚âã G = ùí∞‚ÇÅ F ‚âàg ùí∞‚ÇÅ G   -- proofs (x , y) now replaced with: funcext x y

-- Since equality of functors makes use of ~subst~s all over the place, we will need
-- a lemma about how ~subst~ factors/distributes over an operator composition.
  subst-dist : ‚àÄ {S : Set} {v v‚Äô : S ‚Üí Category.Obj ùíû} (veq : ‚àÄ {z} ‚Üí v z ‚â° v‚Äô z)
         ‚Üí ‚àÄ x t y {ec : v x ùíû.‚ü∂ v t} {psc : v t ùíû.‚ü∂ v y}
         ‚Üí  
           ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq ec ùíû.‚®æ ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq psc
         ‚â° ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq (ec ùíû.‚®æ psc)
  subst-dist veq x t y rewrite veq {x} | veq {t} | veq {y} = ‚â°-refl

  uniquenessOld : ‚àÄ{f : G ‚ü∂ ùí∞‚ÇÄ ùíû} {F : ùí´‚ÇÄ G ‚ü∂ ùíû} ‚Üí f ‚âàg (Œπ ‚®æ ùí∞‚ÇÅ F) ‚Üí lift f ‚â° F
  uniquenessOld {f} {F} (veq , eeq) = funcext veq pf
    where
    
      ùíÆ : ‚àÄ{x y} ‚Üí ver f x ùíû.‚ü∂ ver f y ‚Üí obj F x ùíû.‚ü∂ obj F y
      ùíÆ m = ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq m
      
      pf : ‚àÄ{x y} {p : x ‚áù y} ‚Üí mor F p ‚â° ùíÆ( mor (lift f) p )
      pf {x} {.x} {.x !} rewrite (veq {x})= Functor.id F
      pf {x} {y}  {.x ‚ü∂[ e ]‚ü∂ ps} rewrite (eeq {e = e}) =  begin
          mor F (x ‚ü∂[ e ]‚ü∂ ps)
       ‚â°‚ü®" definition of embedding and concatenation "‚ü©‚Ä≤
          mor F (edge Œπ e ++ ps)
       ‚â°‚ü® functor F preserves-composition ‚ü©
          mor F (edge Œπ e) ùíû.‚®æ mor F ps
       ‚â°‚ü® ‚â°-cong‚ÇÇ ùíû._‚®æ_ eeq (pf {p = ps}) ‚ü© -- inductive step
          ùíÆ(edge f e) ùíû.‚®æ ùíÆ(mor (lift f) ps)
       ‚â°‚ü® subst-dist veq x _ y ‚ü©
          ùíÆ( edge f e ùíû.‚®æ mor (lift f) ps )
       ‚â°‚ü®" definition of ‚Äúmor‚Äù on ‚Äúlift‚Äù, the inductive clause "‚ü©‚Ä≤
          ùíÆ( mor (lift f) (x ‚ü∂[ e ]‚ü∂ ps) )
       ‚àé

  liftÀò : Functor (ùí´‚ÇÄ G) ùíû ‚Üí GraphMap G (ùí∞‚ÇÄ ùíû)
  liftÀò F =  Œπ ‚®æ ùí∞‚ÇÅ F  -- ‚â° record {ver = obj F , edge = mor F ‚àò edge Œπ}

  rid‚ÇÄ : ‚àÄ {f : GraphMap G (ùí∞‚ÇÄ ùíû)} ‚Üí ver (liftÀò (lift f)) ‚â° ver f
  rid‚ÇÄ {f} = begin
      ver (liftÀò (lift f))
    ‚â°‚ü®" ver of liftÀò ; defn of liftÀò "‚ü©‚Ä≤ 
      obj (lift f)
    ‚â°‚ü®" defn of lift.obj "‚ü©‚Ä≤
      ver f
    ‚àé
-- note that ‚â°-refl would have suffcied, but we show all the steps for clarity, for human consumption!

  open Graph G renaming (_‚ü∂_ to _‚ü∂g_)
  rid‚ÇÅ : ‚àÄ{f : GraphMap G (ùí∞‚ÇÄ ùíû)} ‚Üí ‚àÄ{x y} {e : x ‚ü∂g y} ‚Üí edge (liftÀò (lift f)) e ‚â° edge f e
  rid‚ÇÅ {f} {x} {y} {e} = begin
      edge (liftÀò (lift f)) e
    ‚â°‚ü® "liftÀò.edge definition" ‚ü©‚Ä≤
      mor (lift f) (edge Œπ e)
    ‚â°‚ü® "lift.mor~ on an edge; i.e., the inductive case of fmap" ‚ü©‚Ä≤
      edge f e ùíû.‚®æ Id
    ‚â°‚ü® ùíû.rightId ‚ü©
      edge f e
    ‚àé

  rid : ‚àÄ{f : GraphMap G (ùí∞‚ÇÄ ùíû)} ‚Üí liftÀò (lift f) ‚â° f
  rid {f} = graphmapext ‚â°-refl (‚â°-sym (rid‚ÇÅ {f}))

  lid‚ÇÄ : ‚àÄ{F : Functor (ùí´‚ÇÄ G) ùíû} ‚Üí obj (lift (liftÀò F)) ‚â° obj F
  lid‚ÇÄ {F} =  begin
      obj (lift (liftÀò F))
    ‚â°‚ü® "obj of lift" ‚ü©‚Ä≤
      ver (liftÀò F)
    ‚â°‚ü® "ver of liftÀò" ‚ü©‚Ä≤
       obj F
    ‚àé

  lid‚ÇÅ : ‚àÄ{F : Functor (ùí´‚ÇÄ G) ùíû} ‚Üí ‚àÄ {x y} {p : x ‚áù y} ‚Üí mor (lift (liftÀò F)) p ‚â° mor F p
  lid‚ÇÅ {F} {x} {.x} {p = (.x) !} = begin
      mor (lift (liftÀò F)) (x !)
    ‚â°‚ü® "mor of lift on !" ‚ü©‚Ä≤
      ùíû.Id
    ‚â°‚ü® ‚â°-sym (Functor.id F) ‚ü© -- ! is identity path in ~ùí´G~ and functor preserve identites
       mor F (x !)
    ‚àé
  lid‚ÇÅ {F} {x} {y} {p = .x ‚ü∂[ e ]‚ü∂ ps} = begin
      mor (lift (liftÀò F)) (x ‚ü∂[ e ]‚ü∂ ps)
    ‚â°‚ü®‚ü© -- mor on lift on inductive case
      edge (liftÀò F) e ùíû.‚®æ mor (lift (liftÀò F)) ps
    ‚â°‚ü®  ‚â°-cong (Œª w ‚Üí edge (liftÀò F) e ùíû.‚®æ w) (lid‚ÇÅ {F}) ‚ü©
      edge (liftÀò F) e ùíû.‚®æ mor F ps
    ‚â°‚ü® "edge on liftÀò" ‚ü©‚Ä≤
      mor F (edge Œπ e) ùíû.‚®æ mor F ps
    ‚â°‚ü® ‚â°-sym (Functor.comp F) ‚ü© -- factor out Functor.mor
      mor F (edge Œπ e ++ ps)
    ‚â°‚ü® "defn of ++" ‚ü©‚Ä≤
      mor F (x ‚ü∂[ e ]‚ü∂ ps)
    ‚àé

  lid : ‚àÄ {F : Functor (ùí´‚ÇÄ G) ùíû} ‚Üí lift (liftÀò F) ‚â° F
  lid  {F} = funcext ‚â°-refl (‚â°-sym (lid‚ÇÅ {F}))

  -- old version
  lift-‚âà : ‚àÄ{f f‚Äô : GraphMap G (ùí∞‚ÇÄ ùíû)} ‚Üí f ‚âàg f‚Äô ‚Üí lift f ‚âã lift f‚Äô
  lift-‚âà  {f} {f‚Äô} (veq , eeq) = veq , (Œª {x} {y} {p} ‚Üí pf {x} {y} {p})
    where
      pf : {x y : V} {p : x ‚áù y} ‚Üí mor (lift f‚Äô) p ‚â° ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq (mor (lift f) p)
      pf {x} {.x} {p = .x !} rewrite (veq {x}) = ‚â°-refl
      pf {x} {y} {p = .x ‚ü∂[ e ]‚ü∂ ps} = begin 
           mor (lift f‚Äô) (x ‚ü∂[ e ]‚ü∂ ps)
         ‚â°‚ü®‚ü©
           edge f‚Äô e ùíû.‚®æ mor (lift f‚Äô) ps
         ‚â°‚ü® ‚â°-cong‚ÇÇ ùíû._‚®æ_ eeq (pf {p = ps}) ‚ü©
           ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq (edge f e) ùíû.‚®æ ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq (mor (lift f) ps) 
         ‚â°‚ü® subst-dist veq x _ y ‚ü©
            ‚â°-subst‚ÇÇ ùíû._‚ü∂_ veq veq (mor (lift f) (x ‚ü∂[ e ]‚ü∂ ps))
         ‚àé

  uniqueness‚Äô  :  ‚àÄ{f h}   ‚Üí    f  ‚â°  (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ h)   ‚Üí   lift f  ‚â°  h
  uniqueness‚Äô {f} {h} f‚âàŒπ‚®æùí∞‚ÇÅh = begin
      lift f
    ‚â°‚ü® ‚â°-cong lift f‚âàŒπ‚®æùí∞‚ÇÅh ‚ü©
      lift (Œπ ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ h)
    ‚â°‚ü®" definition of liftÀò "‚ü©‚Ä≤
      lift (liftÀò h)
    ‚â°‚ü® lid ‚ü©
      h
    ‚àé

module _ {G H : Graph} {ùíû ùíü : Category {‚Ñì‚ÇÄ} {‚Ñì‚ÇÄ}} 
          (g : GraphMap G H) (F : Functor ùíû ùíü) where

  private
    liftÀò = Œª {A} {C} B ‚Üí freedom.liftÀò A {C} B
    lift = Œª {A} {C} B ‚Üí freedom.lift A {C} B
  open Category ‚¶É...‚¶Ñ

  module ùíû     = Category ùíû
  module ùíü     = Category ùíü
  module ùí¢ùìáùí∂ùìÖùíΩ = Category ùí¢ùìáùí∂ùìÖùíΩ
  module ùíûùí∂ùìâ   = Category (ùíûùí∂ùìâ {‚Ñì‚ÇÄ} {‚Ñì‚ÇÄ})
  module ùíÆ‚ÑØùìâ   = Category (ùíÆeùìâ {‚Ñì‚ÇÄ})

  naturalityÀò : ‚àÄ {K : Functor (ùí´‚ÇÄ H) ùíû} 
              ‚Üí  liftÀò (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ K ùíûùí∂ùìâ.‚®æ F)  ‚â°  (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ liftÀò K ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)
  naturalityÀò = graphmapext ‚â°-refl ‚â°-refl

  naturality : ‚àÄ {k : GraphMap H (ùí∞‚ÇÄ ùíû)} ‚Üí     lift (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) 
                                              ‚â°  (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ lift k ùíûùí∂ùìâ.‚®æ F)
  naturality {k} = funcext ‚â°-refl (Œª {x y p} ‚Üí proof {x} {y} {p})
    where
      open TypedPaths ‚¶É...‚¶Ñ
      instance G‚Ä≤ : Graph ; G‚Ä≤ = G
               H‚Ä≤ : Graph ; H‚Ä≤ = H
      proof : ‚àÄ {x y : Graph.V G} {p : x ‚áù y}
            ‚Üí    mor (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ lift {H} {ùíû} k ùíûùí∂ùìâ.‚®æ F) p 
               ‚â°  mor (lift {G} {ùíü} (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) p
      proof {p = _ !} = functor (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ lift {H} {ùíû} k ùíûùí∂ùìâ.‚®æ F) preserves-identities
      proof {p = x ‚ü∂[ e ]‚ü∂ ps} = begin
            mor (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ lift {H} {ùíû} k ùíûùí∂ùìâ.‚®æ F) (x ‚ü∂[ e ]‚ü∂ ps)
         ‚â°‚ü®" By definition, ‚Äúmor‚Äù distributes over composition "‚ü©‚Ä≤
            (mor (ùí´‚ÇÅ g) ùíÆ‚ÑØùìâ.‚®æ mor (lift {H} {ùíû} k) ùíÆ‚ÑØùìâ.‚®æ mor F) (x ‚ü∂[ e ]‚ü∂ ps)
         ‚â°‚ü®" Definitions of function composition and ‚Äúùí´‚ÇÅ ‚®æ mor‚Äù "‚ü©‚Ä≤
            mor F (mor (lift {H} {ùíû} k) (mor (ùí´‚ÇÅ g) (x ‚ü∂[ e ]‚ü∂ ps)))
                                                  -- This explicit path is in G
         ‚â°‚ü®" Lifting graph-map ‚Äúg‚Äù onto a path "‚ü©‚Ä≤
            mor F (mor (lift {H} {ùíû} k) (ver g x ‚ü∂[ edge g e ]‚ü∂ mor (ùí´‚ÇÅ g) ps))
                                                  -- This explicit path is in H
         ‚â°‚ü®" Definition of ‚Äúlift ‚®æ mor‚Äù on inductive case for paths "‚ü©‚Ä≤
            mor F (edge k (edge g e) ùíû.‚®æ mor (lift {H} {ùíû} k) (mor (ùí´‚ÇÅ g) ps))
         ‚â°‚ü® functor F preserves-composition ‚ü©
                mor F (edge k (edge g e))
           ùíü.‚®æ  mor F (mor (lift {H} {ùíû} k) (mor (ùí´‚ÇÅ g) ps))
         ‚â°‚ü®" Definition of function composition, for top part "‚ü©‚Ä≤            
               (edge g ùíÆ‚ÑØùìâ.‚®æ edge k ùíÆ‚ÑØùìâ.‚®æ mor F) e  -- ‚âà mor F ‚àò edge k ‚àò edge g
           ùíü.‚®æ (mor (ùí´‚ÇÅ g) ùíÆ‚ÑØùìâ.‚®æ mor (lift {H} {ùíû} k) ùíÆ‚ÑØùìâ.‚®æ mor F) ps
         ‚â°‚ü®" ‚Äúùí∞‚ÇÅ ‚®æ edge = mor‚Äù and ‚Äúedge‚Äù and ‚Äúmor‚Äù are functorial by definition "‚ü©‚Ä≤
                edge (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) e 
           ùíü.‚®æ  mor (ùí´‚ÇÅ g ùíûùí∂ùìâ.‚®æ lift {H} {ùíû} k ùíûùí∂ùìâ.‚®æ F) ps
         ‚â°‚ü® {- Inductive Hypothesis: -} ‚â°-cong‚ÇÇ ùíü._‚®æ_ ‚â°-refl (proof {p = ps}) ‚ü©
                edge (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F) e 
           ùíü.‚®æ  mor (lift {G} {ùíü} (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) ps
         ‚â°‚ü®" Definition of ‚Äúlift ‚®æ mor‚Äù on inductive case for paths "‚ü©‚Ä≤
            mor (lift {G} {ùíü} (g ùí¢ùìáùí∂ùìÖùíΩ.‚®æ k ùí¢ùìáùí∂ùìÖùíΩ.‚®æ ùí∞‚ÇÅ F)) (x ‚ü∂[ e ]‚ü∂ ps)
         ‚àé

ùí´‚ä£ùí∞ : ùí´ ‚ä£ ùí∞
ùí´‚ä£ùí∞ = record{
    ‚åä_‚åã = liftÀò
  ; ‚åà_‚åâ = lift
  ; lid = lid
  ; rid = Œª {G ùíû c} ‚Üí rid {G} {ùíû} {c}
  ; lfusion = Œª {G H ùíû ùíü f F K} ‚Üí naturalityÀò {G} {H} {ùíû} {ùíü} f K {F}
  ; rfusion = Œª {G H ùíû ùíü f k F} ‚Üí naturality {G} {H} {ùíû} {ùíü} f F {k} }
  where
    module _ {G : Graph} {ùíû : Category} where open freedom G {ùíû} public

module folding (G : Graph) where
  open TypedPaths G
  open Graph G
                                              -- Given:
  fold : {X : Set} (v : V ‚Üí X)               -- realise G's vertices as X elements
         (f : ‚àÄ x {y} (e : x ‚ü∂ y) ‚Üí X ‚Üí X) -- realise paths as X elements
       ‚Üí (‚àÄ {a b} ‚Üí a ‚áù b ‚Üí X)            -- Then: Any path is an X value
  fold v f (b !) = v b
  fold v f (x ‚ü∂[ e ]‚ü∂ ps) = f x e (fold v f ps)

  length : ‚àÄ{x y} ‚Üí x ‚áù y ‚Üí ‚Ñï
  length = fold (Œª _ ‚Üí 0)          -- single walks are length 0.
                (Œª _ _ n ‚Üí 1 + n)  -- edges are one more than the 
                                    -- length of the remaining walk

  length-! : ‚àÄ{x} ‚Üí length (x !) ‚â° 0
  length-! = ‚â°-refl
  -- True by definition of ‚Äúlength‚Äù: The first argument to the ‚Äúfold‚Äù

  length-ind : ‚àÄ {x y œâ} {e : x ‚ü∂ y} {ps : y ‚áù œâ} 
            ‚Üí  length (x ‚ü∂[ e ]‚ü∂ ps)  ‚â°  1 + length ps
  length-ind = ‚â°-refl 
  -- True by definition of ‚Äúlength‚Äù: The second-argument to the ‚Äúfold‚Äù

  path-cost : (c : ‚àÄ{x y}(e : x ‚ü∂ y) ‚Üí ‚Ñï) ‚Üí ‚àÄ{x y}(ps : x ‚áù y) ‚Üí ‚Ñï
  path-cost c = fold (Œª _ ‚Üí 0)           -- No cost on an empty path.
                     (Œª x e n ‚Üí c e + n) -- Cost of current edge plus 
                                          -- cost of remainder of path.

  fold-++ :  ‚àÄ{X : Set} {v : V ‚Üí X} {g : ‚àÄ x {y} (e : x ‚ü∂ y) ‚Üí X}
          ‚Üí (_‚äï_ : X ‚Üí X ‚Üí X)
          ‚Üí ‚àÄ{x y z : V} {p : x ‚áù y} {q : y ‚áù z}
          ‚Üí (unitl : ‚àÄ{x y} ‚Üí y ‚â° v x ‚äï y)        -- Image of ‚Äòv‚Äô is left unit of ‚äï
          ‚Üí (assoc : ‚àÄ {x y z} ‚Üí x ‚äï (y ‚äï z) ‚â° (x ‚äï y) ‚äï z )  -- ‚äï is associative 
          ‚Üí let f : ‚àÄ x {y} (e : x ‚ü∂ y) ‚Üí X ‚Üí X
                f = Œª x e ps ‚Üí g x e ‚äï ps
             in
               fold v f (p ++ q) ‚â° fold v f p ‚äï fold v f q
  fold-++ {g = g} _‚äï_ {x = x} {p = .x !} unitl assoc =  unitl
  fold-++ {g = g} _‚äï_ {x = x} {p = .x ‚ü∂[ e ]‚ü∂ ps} unitl assoc =
    ‚â°-cong (Œª exp ‚Üí g x e ‚äï exp) (fold-++ _‚äï_ {p = ps} unitl assoc) ‚ü®‚â°‚â°‚ü© assoc

module lists (A : Set) where

  open import Data.Unit

  listGraph : Graph
  listGraph = record { V = A ; _‚ü∂_ = Œª a a‚Äô ‚Üí ‚ä§ }

  open TypedPaths listGraph
  open folding listGraph

  -- Every non-empty list [x‚ÇÄ, ‚Ä¶, x‚Çñ] of A‚Äôs corresonds to a path x‚ÇÄ ‚áù x‚Çñ.
  toPath : ‚àÄ{n} (list : Fin (suc n) ‚Üí A) ‚Üí  list fzero ‚áù list (from‚Ñï n)
  toPath {zero} list = list fzero !
  toPath {suc n} list = list fzero ‚ü∂[ tt ]‚ü∂ toPath {n} (Œª i ‚Üí list(fsuc i))
    -- Note that in the inductive case, ‚Äúlist : Fin (suc (suc n)) ‚Üí A‚Äù 
    -- whereas ‚Äúsuc ‚®æ list : Fin (suc n) ‚Üí A‚Äù.
    --
    -- For example, if ‚Äúlist ‚âà [x , y , z]‚Äù yields
    --          ‚Äúfsuc ‚®æ list ‚âà [y , z ]‚Äù and
    --   ‚Äúfsuc ‚®æ fsuc ‚®æ list ‚âà [z]‚Äù.

  -- List type former
  List = Œª (X : Set) ‚Üí Œ£ n ‚à∂ ‚Ñï ‚Ä¢ (Fin n ‚Üí X)

  -- Usual list folding, but it's in terms of path folding.
  foldr : ‚àÄ{B : Set} (f : A ‚Üí B ‚Üí B) (e : B) ‚Üí List A ‚Üí B
  foldr f e (zero , l) = e
  foldr f e (suc n , l) = fold (Œª a ‚Üí f a e) (Œª a _ rem ‚Üí f a rem) (toPath l)

  -- example
  listLength : List A ‚Üí ‚Ñï -- result should clearly be ‚Äúproj‚ÇÅ‚Äù of the list, anyhow:
  listLength = foldr 
    (Œª a rem ‚Üí 1 + rem) -- Non-empty list has length 1 more than the remainder.
    0                    -- Empty list has length 0.

  -- Empty list
  [] : ‚àÄ{X : Set} ‚Üí List X
  [] = 0 , Œª ()

  -- Cons for lists
  _‚à∑_ : ‚àÄ{X : Set} ‚Üí X ‚Üí List X ‚Üí List X
  _‚à∑_ {X} x (n , l) = 1 + n , cons x l
    where
      -- ‚Äúcons a l  ‚âà  Œª i : Fin (1 + n) ‚Üí if i ‚âà 0 then a else l i‚Äù
      cons : ‚àÄ{n} ‚Üí X ‚Üí (Fin n ‚Üí X) ‚Üí (Fin (suc n) ‚Üí X)
      cons x l fzero = x
      cons x l (fsuc i) = l i
  
  map : ‚àÄ {B} (f : A ‚Üí B) ‚Üí List A ‚Üí List B
  map f =  foldr (Œª a rem ‚Üí f a ‚à∑ rem) []  -- looks like the usual map don‚Äôt it ;)

  -- list concatenation
  _++‚Ñì_ : List A ‚Üí List A ‚Üí List A
  l ++‚Ñì r = foldr _‚à∑_ r l -- fold over ‚Äòl‚Äô by consing its elements infront of ‚Äòr‚Äô

  -- Exercise: Write path catenation as a path-fold.
